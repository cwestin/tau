#!/usr/bin/python
# tau - from https://github.com/cwestin/tau
# Copyright 2013 by Chris Westin.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script generates a makefile for the library.  It assumes a particular
# set of directories that are part of the library, but addresses them
# relatively (or uses os.getcwd()) so that the library directory can be
# put anywhere.
#
# To use, cd to the containing directory, and issue "./makemake", followed by
# "make"

import os
import os.path
import re


# keep around some compiled regular expressions we use repeatedly
filebasere = re.compile('(?P<filebase>.*)\\.c$')
includere = re.compile('^#\\s*include\\s*"(?P<incfile>.*)"')

def writeobjdeps(makefilefd, filebase):
    srcname = 'src/' + filebase + '.c'
    srcfd = open(srcname)
    if (srcfd is None):
        print 'cannot open %s' % srcname
        return

    # the object file depends on the source file
    objname = 'obj/' + filebase + '.o'
    makefilefd.write('%s:\t%s' % (objname, srcname))

    for srcline in srcfd:
        mo = includere.search(srcline)
        if (mo is None):
            continue
        incfile = mo.group('incfile')
        if (incfile is None):
            continue
        # the object also depends on this include file
        makefilefd.write(' include/%s' % incfile)

    # end the dependency list
    makefilefd.write('\n')
    srcfd.close()

    # write the rule
    makefilefd.write('\t$(CC) $(CFLAGS) -c -o %s %s\n' % (objname, srcname))
    makefilefd.write('\t$(AR) $(ARFLAGS) lib/$(LIBRARY) %s\n' % objname)
    makefilefd.write('\n')

    # the test file depends on the test source file and library
    testsrc = 'testsrc/test%s.c' % filebase
    if (os.path.isfile(testsrc)):
        makefilefd.write('test/test%s:\ttestsrc/test%s.c obj/%s.o lib/$(LIBRARY)\n' %
                         (filebase, filebase, filebase))
        makefilefd.write('\t$(CC) $(CFLAGS) -o $@ testsrc/test%s.c -Wl,-Llib,-l$(LIBROOT)\n' % filebase)
        makefilefd.write('\n')


def visitsrcdir(makefilefd):
    names = os.listdir('src')
    if (names is None) or (len(names) == 0):
        return

    filebases = []
    makefilefd.write('OBJECTS =')
    for srcfilename in names:
        mo = filebasere.search(srcfilename)
        # if we found a file that isn't a source file, alert the user
        if (mo is None):
            # don't report on emacs backup files
            if (srcfilename[-1] == '~'):
                continue
            print '%s is not a source file name' % srcfilename
            return
        filebase = mo.group('filebase')
        if (filebase is None):
            print '%s is not a source file name' % srcfilename
            return
    
        filebases.append(filebase)
        makefilefd.write(' obj/%s.o' % filebase)

    # end the OBJECTS list
    makefilefd.write('\n')

    makefilefd.write('\n')

    # the rule to build the library
    makefilefd.write('lib/$(LIBRARY):\t$(OBJECTS)\n')
    makefilefd.write('\n')

    # clean
    makefilefd.write('.PHONY:\tclean\n')
    makefilefd.write('\n')
    makefilefd.write('clean:\n')
    makefilefd.write('\t-rm -r *~ src/*~ testsrc/*~ obj/*.o lib/*.a test/*\n')
    makefilefd.write('\n')

    # add the individual files' dependencies
    makefilefd.write('\n')
    for srcbase in filebases:
        writeobjdeps(makefilefd, srcbase)

    # tests
    testcounter = 0
    makefilefd.write('TESTS =')
    for srcbase in filebases:
        if (os.path.isfile('testsrc/test%s.c' % srcbase)):
            makefilefd.write(' test/test%s' % srcbase)
            testcounter = testcounter + 1
    makefilefd.write('\n')
    makefilefd.write('\n')

    if (testcounter > 0):
        makefilefd.write('.PHONY:\ttests\n')
        makefilefd.write('\n')
        makefilefd.write('tests:\t$(TESTS)\n')
        makefilefd.write('\n')

        makefilefd.write('.PHONY:\ttestall\n')
        makefilefd.write('\n')
        makefilefd.write('testall:\ttests\n')
        for srcbase in filebases:
            if (not os.path.isfile('testsrc/test%s.c' % srcbase)):
                continue
            makefilefd.write('\ttest/test%s\n' % srcbase)
        makefilefd.write('\n')



if __name__ == '__main__':
    # create the makefile
    makefilefd = open('Makefile', 'w')

    cwd = os.getcwd()

    # standard preamble
    makefilefd.write('# Makefile generated by makemake\n')
    makefilefd.write('\n')
    makefilefd.write('CC = cc\n')
    makefilefd.write('DEBUG = -g\n')
    makefilefd.write('INCLUDE = %s/include/\n' % cwd)
    makefilefd.write('CFLAGS = -Wall -Wno-invalid-offsetof -I$(INCLUDE) $(DEBUG)\n')
    makefilefd.write('\n')

    makefilefd.write('AR = ar\n')
    makefilefd.write('ARFLAGS = -rsc\n')
    makefilefd.write('LIBROOT = taucrtl\n')
    makefilefd.write('LIBRARY = lib$(LIBROOT).a')
    makefilefd.write('\n')

    visitsrcdir(makefilefd)
    makefilefd.close()
    pass
